# Generated by Django 3.2.13 on 2022-06-29 15:31

import apps.landmatrix.models.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_alpha2', models.CharField(max_length=2, verbose_name='Code ISO 3166-1 alpha2')),
                ('code_alpha3', models.CharField(max_length=3, verbose_name='Code ISO 3166-1 alpha3')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, verbose_name='Slug')),
                ('point_lat', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of central point')),
                ('point_lon', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of central point')),
                ('point_lat_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of southernmost point')),
                ('point_lon_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of westernmost point')),
                ('point_lat_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of northernmost point')),
                ('point_lon_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of easternmost point')),
                ('democracy_index', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Democracy index')),
                ('corruption_perception_index', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='Corruption perception index')),
                ('high_income', models.BooleanField(default=False, verbose_name='High income')),
                ('is_target_country', models.BooleanField(default=False, verbose_name='Is target country')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('symbol', models.CharField(max_length=255, verbose_name='Symbol')),
                ('country', models.CharField(max_length=2, verbose_name='Country')),
                ('ranking', models.IntegerField(verbose_name='Ranking')),
            ],
        ),

        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('investor_identifier', models.IntegerField(db_index=True, default=2147483647, verbose_name='Investor id')),
                ('name', models.CharField(max_length=1024, verbose_name='Name')),
                ('classification', models.CharField(blank=True, choices=[('10', 'Private company'), ('20', 'Stock-exchange listed company'), ('30', 'Individual entrepreneur'), ('40', 'Investment fund'), ('50', 'Semi state-owned company'), ('60', 'State-/government (owned) company'), ('70', 'Other (please specify in comment field)'), ('110', 'Government'), ('120', 'Government institution'), ('130', 'Multilateral Development Bank (MDB)'), ('140', 'Bilateral Development Bank / Development Finance Institution'), ('150', 'Commercial Bank'), ('160', 'Investment Bank'), ('170', 'Investment Fund (all types incl. pension, hedge, mutual, private equity funds etc.)'), ('180', 'Insurance firm'), ('190', 'Private equity firm'), ('200', 'Asset management firm'), ('210', 'Non - Profit organization (e.g. Church, University etc.)')], max_length=3, null=True)),
                ('parent_relation', models.CharField(blank=True, choices=[('Subsidiary', 'Subsidiary of parent company'), ('Local branch', 'Local branch of parent company'), ('Joint venture', 'Joint venture of parent companies')], max_length=255, null=True)),
                ('homepage', models.URLField(blank=True, null=True, verbose_name='Investor homepage')),
                ('opencorporates_link', models.URLField(blank=True, null=True, verbose_name='Opencorporates link')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('fk_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='landmatrix.country', verbose_name='Country of registration/origin')),
            ],
            options={
                'verbose_name': 'Investor',
                'ordering': ('name',),
                'verbose_name_plural': 'Investors',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_name', models.CharField(max_length=255, verbose_name='English name')),
                ('local_name', models.CharField(max_length=255, verbose_name='Local name')),
                ('locale', models.CharField(max_length=31, verbose_name='Locale')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('point_lat_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of northernmost point')),
                ('point_lon_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of westernmost point')),
                ('point_lat_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of southernmost point')),
                ('point_lon_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of easternmost point')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='InvestorVentureInvolvement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('investment_type', models.CharField(blank=True, max_length=10, null=True, verbose_name='')),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Ownership share')),
                ('role', models.CharField(choices=[('ST', 'Stakeholder'), ('IN', 'Investor')], max_length=2)),
                ('loans_amount', models.FloatField(blank=True, null=True, verbose_name='Loan amount')),
                ('loans_date', models.CharField(blank=True, max_length=10, null=True, verbose_name='Loan date')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('fk_investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='landmatrix.investor')),
                ('fk_status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='landmatrix.status', verbose_name='Status')),
                ('fk_venture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venture_involvements', to='landmatrix.investor')),
                ('loans_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='landmatrix.currency', verbose_name='Loan currency')),
            ],
            options={
                'get_latest_by': 'timestamp',
                'verbose_name': 'Investor Venture Involvement',
                'ordering': ('-timestamp',),
                'verbose_name_plural': 'Investor Venture Involvements',
            },
        ),
        migrations.AddField(
            model_name='investor',
            name='fk_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landmatrix.status', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='investor',
            name='subinvestors',
            field=models.ManyToManyField(through='landmatrix.InvestorVentureInvolvement', to='landmatrix.Investor'),
        ),
        migrations.AddField(
            model_name='country',
            name='fk_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='landmatrix.region', verbose_name='Region'),
        ),
        migrations.AlterField(
            model_name='investor',
            name='classification',
            field=models.CharField(blank=True, choices=[('10', 'Private company'), ('20', 'Stock-exchange listed company'), ('30', 'Individual entrepreneur'), ('40', 'Investment fund'), ('50', 'Semi state-owned company'), ('60', 'State-/government (owned) company'), ('70', 'Other (please specify in comment field)'), ('110', 'Government'), ('120', 'Government institution'), ('130', 'Multilateral Development Bank (MDB)'), ('140', 'Bilateral Development Bank / Development Finance Institution'), ('150', 'Commercial Bank'), ('160', 'Investment Bank'), ('170', 'Investment Fund (all types incl. pension, hedge, mutual, private equity funds etc.)'), ('180', 'Insurance firm'), ('190', 'Private equity firm'), ('200', 'Asset management firm'), ('210', 'Non - Profit organization (e.g. Church, University etc.)')], max_length=3, null=True, verbose_name='Classification'),
        ),
        migrations.AlterField(
            model_name='investor',
            name='investor_identifier',
            field=models.IntegerField(db_index=True, default=2147483647, verbose_name='Investor ID'),
        ),
        migrations.AlterField(
            model_name='investor',
            name='parent_relation',
            field=models.CharField(blank=True, choices=[('Subsidiary', 'Subsidiary of parent company'), ('Local branch', 'Local branch of parent company'), ('Joint venture', 'Joint venture of parent companies')], max_length=255, null=True, verbose_name='Parent relation'),
        ),
        migrations.AlterField(
            model_name='investorventureinvolvement',
            name='fk_investor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='investors', to='landmatrix.investor', verbose_name='Investor ID Upstream'),
        ),
        migrations.AlterField(
            model_name='investorventureinvolvement',
            name='fk_venture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venture_involvements', to='landmatrix.investor', verbose_name='Investor ID Downstream'),
        ),
        migrations.AlterField(
            model_name='investorventureinvolvement',
            name='role',
            field=models.CharField(choices=[('ST', 'Parent company'), ('IN', 'Tertiary investor/lendor')], max_length=2, verbose_name='Relation type'),
        ),
        migrations.AlterModelOptions(
            name='investorventureinvolvement',
            options={'ordering': ('-id',), 'verbose_name': 'Investor Venture Involvement', 'verbose_name_plural': 'Investor Venture Involvements'},
        ),
        migrations.RemoveField(
            model_name='investorventureinvolvement',
            name='timestamp',
        ),
        migrations.AlterField(
            model_name='investor',
            name='investor_identifier',
            field=models.IntegerField(db_index=True, default=2147483647, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='investor',
            name='investor_identifier',
            field=models.IntegerField(db_index=True, default=2147483647, verbose_name='Investor ID'),
        ),
        migrations.AddField(
            model_name='investorventureinvolvement',
            name='parent_relation',
            field=models.CharField(blank=True, choices=[('Subsidiary', 'Subsidiary of parent company'), ('Local branch', 'Local branch of parent company'), ('Joint venture', 'Joint venture of parent companies')], max_length=255, null=True, verbose_name='Parent relation'),
        ),
        migrations.RemoveField(
            model_name='investorventureinvolvement',
            name='fk_investor',
        ),
        migrations.RemoveField(
            model_name='investorventureinvolvement',
            name='fk_status',
        ),
        migrations.RemoveField(
            model_name='investorventureinvolvement',
            name='fk_venture',
        ),
        migrations.RemoveField(
            model_name='investorventureinvolvement',
            name='loans_currency',
        ),
        migrations.DeleteModel(
            name='Investor',
        ),
        migrations.DeleteModel(
            name='InvestorVentureInvolvement',
        ),
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024, verbose_name='Name')),
                ('classification', models.CharField(blank=True, choices=[('GOVERNMENT', 'Government'), ('GOVERNMENT_INSTITUTION', 'Government institution'), ('STATE_OWNED_COMPANY', 'State-/government (owned) company'), ('SEMI_STATE_OWNED_COMPANY', 'Semi state-owned company'), ('ASSET_MANAGEMENT_FIRM', 'Asset management firm'), ('BILATERAL_DEVELOPMENT_BANK', 'Bilateral Development Bank / Development Finance Institution'), ('STOCK_EXCHANGE_LISTED_COMPANY', 'Stock-exchange listed company'), ('COMMERCIAL_BANK', 'Commercial Bank'), ('INSURANCE_FIRM', 'Insurance firm'), ('INVESTMENT_BANK', 'Investment Bank'), ('INVESTMENT_FUND', 'Investment fund'), ('MULTILATERAL_DEVELOPMENT_BANK', 'Multilateral Development Bank (MDB)'), ('PRIVATE_COMPANY', 'Private company'), ('PRIVATE_EQUITY_FIRM', 'Private equity firm'), ('INDIVIDUAL_ENTREPRENEUR', 'Individual entrepreneur'), ('NON_PROFIT', 'Non - Profit organization (e.g. Church, University etc.)'), ('OTHER', 'Other (please specify in comment field)')], max_length=100, null=True, verbose_name='Classification')),
                ('homepage', models.URLField(blank=True, verbose_name='Investor homepage')),
                ('opencorporates', models.URLField(blank=True, verbose_name='Opencorporates link')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('draft_status', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation')], null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField()),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('is_actually_unknown', models.BooleanField(default=False)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.country', verbose_name='Country of registration/origin')),
            ],
        ),
        migrations.CreateModel(
            name='InvestorVentureInvolvement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('PARENT', 'Parent company'), ('LENDER', 'Tertiary investor/lender')], max_length=100, verbose_name='Relation type')),
                ('investment_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('EQUITY', 'Shares/Equity'), ('DEBT_FINANCING', 'Debt financing')], max_length=100), blank=True, null=True, size=None, verbose_name='Investment type')),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Ownership share')),
                ('loans_amount', models.FloatField(blank=True, null=True, verbose_name='Loan amount')),
                ('loans_date', models.CharField(blank=True, default='', max_length=20, verbose_name='Loan date')),
                ('parent_relation', models.CharField(blank=True, choices=[('SUBSIDIARY', 'Subsidiary of parent company'), ('LOCAL_BRANCH', 'Local branch of parent company'), ('JOINT_VENTURE', 'Joint venture of parent companies')], max_length=100, null=True, verbose_name='Parent relation')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ventures', to='landmatrix.investor', verbose_name='Investor')),
                ('loans_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.currency', verbose_name='Loan currency')),
                ('venture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='investors', to='landmatrix.investor', verbose_name='Venture Company')),
            ],
            options={
                'verbose_name': 'Investor Venture Involvement',
                'verbose_name_plural': 'Investor Venture Involvements',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='investor',
            name='involvements',
            field=models.ManyToManyField(through='landmatrix.InvestorVentureInvolvement', to='landmatrix.Investor'),
        ),
        migrations.CreateModel(
            name='DealTopInvestors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'landmatrix_deal_top_investors',
                'managed': False,
            },
        ),
        migrations.AlterField(
            model_name='investor',
            name='draft_status',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True),
        ),
        migrations.AlterField(
            model_name='investor',
            name='modified_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='investor',
            name='status',
            field=models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted')], default=1),
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(db_index=True, help_text='The date and time this revision was created.', verbose_name='date created')),
                ('comment', models.TextField(blank=True, default='', help_text='A text comment on this revision.', verbose_name='comment')),
            ],
        ),
        migrations.CreateModel(
            name='InvestorVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(blank=True, null=True)),
                ('serialized_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('revision', models.ForeignKey(help_text='The revision that contains this version.', on_delete=django.db.models.deletion.CASCADE, to='landmatrix.revision')),
            ],
            options={
                'ordering': ['-pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DealVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(blank=True, null=True)),
                ('serialized_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('revision', models.ForeignKey(help_text='The revision that contains this version.', on_delete=django.db.models.deletion.CASCADE, to='landmatrix.revision')),
            ],
            options={
                'ordering': ['-pk'],
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='investor',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='investor',
            name='modified_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Last update'),
        ),
        migrations.CreateModel(
            name='DealParentCompanies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'landmatrix_deal_parent_companies',
                'managed': False,
            },
        ),
        migrations.AlterModelOptions(
            name='country',
            options={'ordering': ('name',), 'verbose_name_plural': 'Countries'},
        ),
        migrations.AlterField(
            model_name='country',
            name='fk_region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='landmatrix.region', verbose_name='Region'),
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intended_size', models.DecimalField(blank=True, decimal_places=2, help_text='ha', max_digits=12, null=True, verbose_name='Intended size (in ha)')),
                ('contract_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size under contract (leased or purchased area, in ha)')),
                ('production_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size in operation (production, in ha)')),
                ('land_area_comment', models.TextField(blank=True, verbose_name='Comment on land area')),
                ('intention_of_investment', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('Agriculture', (('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'))), ('Forestry', (('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'))), ('Other', (('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')))], null=True, verbose_name='Intention of investment')),
                ('intention_of_investment_comment', models.TextField(blank=True, verbose_name='Comment on intention of investment')),
                ('nature_of_deal', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Nature of the deal'), blank=True, choices=[('OUTRIGHT_PURCHASE', 'Outright purchase'), ('LEASE', 'Lease'), ('CONCESSION', 'Concession'), ('EXPLOITATION_PERMIT', 'Exploitation permit / license / concession (for mineral resources)'), ('PURE_CONTRACT_FARMING', 'Pure contract farming'), ('OTHER', 'Other')], null=True, size=None)),
                ('nature_of_deal_comment', models.TextField(blank=True, verbose_name='Comment on nature of the deal')),
                ('negotiation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('Intended', (('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'))), ('Concluded', (('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'))), ('Failed', (('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'))), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], null=True, verbose_name='Negotiation status')),
                ('negotiation_status_comment', models.TextField(blank=True, verbose_name='Comment on negotiation status')),
                ('implementation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')], null=True, verbose_name='Implementation status')),
                ('implementation_status_comment', models.TextField(blank=True, verbose_name='Comment on implementation status')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Purchase price')),
                ('purchase_price_type', models.CharField(blank=True, choices=[('PER_HA', 'per ha'), ('PER_AREA', 'for specified area')], max_length=100, null=True, verbose_name='Purchase price area type')),
                ('purchase_price_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Purchase price area')),
                ('purchase_price_comment', models.TextField(blank=True, verbose_name='Comment on purchase price')),
                ('annual_leasing_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Annual leasing fee')),
                ('annual_leasing_fee_type', models.CharField(blank=True, choices=[('PER_HA', 'per ha'), ('PER_AREA', 'for specified area')], max_length=100, null=True, verbose_name='Annual leasing fee area type')),
                ('annual_leasing_fee_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Annual leasing fee area')),
                ('annual_leasing_fee_comment', models.TextField(blank=True, verbose_name='Comment on leasing fee')),
                ('contract_farming', models.NullBooleanField()),
                ('on_the_lease_state', models.NullBooleanField(verbose_name='On leased / purchased')),
                ('off_the_lease_state', models.NullBooleanField(verbose_name='Not on leased / purchased (out-grower)')),
                ('contract_farming_comment', models.TextField(blank=True, verbose_name='Comment on contract farming')),
                ('total_jobs_created', models.NullBooleanField(verbose_name='Jobs created (total)')),
                ('total_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (total)')),
                ('total_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (total)')),
                ('total_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (total)')),
                ('total_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Current total number of jobs/employees/ daily/seasonal workers')),
                ('total_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (total)')),
                ('foreign_jobs_created', models.NullBooleanField(verbose_name='Jobs created (foreign)')),
                ('foreign_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (foreign)')),
                ('foreign_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (foreign)')),
                ('foreign_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (foreign)')),
                ('foreign_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Current foreign number of jobs/employees/ daily/seasonal workers')),
                ('foreign_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (foreign)')),
                ('domestic_jobs_created', models.NullBooleanField(verbose_name='Jobs created (domestic)')),
                ('domestic_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (domestic)')),
                ('domestic_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (domestic)')),
                ('domestic_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (domestic)')),
                ('domestic_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Current domestic number of jobs/employees/ daily/seasonal workers')),
                ('domestic_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (domestic)')),
                ('involved_actors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('GOVERNMENT_OR_STATE_INSTITUTIONS', 'Government / state institutions (government, ministries, departments, agencies etc.)'), ('TRADITIONAL_LAND_OWNERS_OR_COMMUNITIES', 'Traditional land-owners / communities'), ('TRADITIONAL_LOCAL_AUTHORITY', 'Traditional local authority (e.g. Chiefdom council / Chiefs)'), ('BROKER', 'Broker'), ('INTERMEDIARY', 'Intermediary'), ('OTHER', 'Other (please specify)')], null=True, verbose_name='Actors involved in the negotiation / admission process')),
                ('project_name', models.CharField(blank=True, max_length=255, verbose_name='Name of investment project')),
                ('investment_chain_comment', models.TextField(blank=True, verbose_name='Comment on investment chain')),
                ('name_of_community', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of community'), blank=True, null=True, size=None)),
                ('name_of_indigenous_people', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of indigenous people'), blank=True, null=True, size=None)),
                ('people_affected_comment', models.TextField(blank=True, verbose_name='Comment on communities / indigenous peoples affected')),
                ('recognition_status', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Recognition status of community land tenure'), blank=True, choices=[('INDIGENOUS_RIGHTS_RECOGNIZED', 'Indigenous Peoples traditional or customary rights recognized by government'), ('INDIGENOUS_RIGHTS_NOT_RECOGNIZED', 'Indigenous Peoples traditional or customary rights not recognized by government'), ('COMMUNITY_RIGHTS_RECOGNIZED', 'Community traditional or customary rights recognized by government'), ('COMMUNITY_RIGHTS_NOT_RECOGNIZED', 'Community traditional or customary rights not recognized by government')], null=True, size=None)),
                ('recognition_status_comment', models.TextField(blank=True, verbose_name='Comment on recognition status of community land tenure')),
                ('community_consultation', models.CharField(blank=True, choices=[('NOT_CONSULTED', 'Not consulted'), ('LIMITED_CONSULTATION', 'Limited consultation'), ('FPIC', 'Free, Prior and Informed Consent (FPIC)'), ('OTHER', 'Other')], max_length=100, null=True, verbose_name='Community consultation')),
                ('community_consultation_comment', models.TextField(blank=True, verbose_name='Comment on consultation of local community')),
                ('community_reaction', models.CharField(blank=True, choices=[('CONSENT', 'Consent'), ('MIXED_REACTION', 'Mixed reaction'), ('REJECTION', 'Rejection')], max_length=100, null=True, verbose_name='Community reaction')),
                ('community_reaction_comment', models.TextField(blank=True, verbose_name='Comment on community reaction')),
                ('land_conflicts', models.NullBooleanField(verbose_name='Presence of land conflicts')),
                ('land_conflicts_comment', models.TextField(blank=True, verbose_name='Comment on presence of land conflicts')),
                ('displacement_of_people', models.NullBooleanField(verbose_name='Displacement of people')),
                ('displaced_people', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of people actually displaced')),
                ('displaced_households', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of households actually displaced')),
                ('displaced_people_from_community_land', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of people displaced out of their community land')),
                ('displaced_people_within_community_land', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of people displaced staying on community land')),
                ('displaced_households_from_fields', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of households displaced "only" from their agricultural fields')),
                ('displaced_people_on_completion', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of people facing displacement once project is fully implemented')),
                ('displacement_of_people_comment', models.TextField(blank=True, verbose_name='Comment on displacement of people')),
                ('negative_impacts', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Negative impacts for local communities'), blank=True, choices=[('ENVIRONMENTAL_DEGRADATION', 'Environmental degradation'), ('SOCIO_ECONOMIC', 'Socio-economic'), ('CULTURAL_LOSS', 'Cultural loss'), ('EVICTION', 'Eviction'), ('DISPLACEMENT', 'Displacement'), ('VIOLENCE', 'Violence'), ('OTHER', 'Other')], null=True, size=None)),
                ('negative_impacts_comment', models.TextField(blank=True, verbose_name='Comment on negative impacts for local communities')),
                ('promised_compensation', models.TextField(blank=True, verbose_name='Promised compensation (e.g. for damages or resettlements)')),
                ('received_compensation', models.TextField(blank=True, verbose_name='Received compensation (e.g. for damages or resettlements)')),
                ('promised_benefits', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Promised benefits for local communities'), blank=True, choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity building'), ('FINANCIAL_SUPPORT', 'Financial support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], null=True, size=None)),
                ('promised_benefits_comment', models.TextField(blank=True, verbose_name='Comment on promised benefits for local communities')),
                ('materialized_benefits', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Materialized benefits for local communities'), blank=True, choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity building'), ('FINANCIAL_SUPPORT', 'Financial support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], null=True, size=None)),
                ('materialized_benefits_comment', models.TextField(blank=True, verbose_name='Comment on materialized benefits for local communities')),
                ('presence_of_organizations', models.TextField(blank=True, verbose_name='Presence of organizations and actions taken (e.g. farmer organizations, NGOs, etc.)')),
                ('former_land_owner', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('STATE', 'State'), ('PRIVATE_SMALLHOLDERS', 'Private (smallholders)'), ('PRIVATE_LARGE_SCALE', 'Private (large-scale farm)'), ('COMMUNITY', 'Community'), ('INDIGENOUS_PEOPLE', 'Indigenous people'), ('OTHER', 'Other')], null=True, size=None, verbose_name='Former land owner')),
                ('former_land_owner_comment', models.TextField(blank=True, verbose_name='Comment on former land owner')),
                ('former_land_use', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('COMMERCIAL_AGRICULTURE', 'Commercial (large-scale) agriculture'), ('SMALLHOLDER_AGRICULTURE', 'Smallholder agriculture'), ('SHIFTING_CULTIVATION', 'Shifting cultivation'), ('PASTORALISM', 'Pastoralism'), ('HUNTING_GATHERING', 'Hunting/Gathering'), ('FORESTRY', 'Forestry'), ('CONSERVATION', 'Conservation'), ('OTHER', 'Other')], null=True, size=None, verbose_name='Former land use')),
                ('former_land_use_comment', models.TextField(blank=True, verbose_name='Comment on former land use')),
                ('former_land_cover', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('CROPLAND', 'Cropland'), ('FOREST_LAND', 'Forest land'), ('PASTURE', 'Pasture'), ('RANGELAND', 'Shrub land/Grassland (Rangeland)'), ('MARGINAL_LAND', 'Marginal land'), ('WETLAND', 'Wetland'), ('OTHER_LAND', 'Other land (e.g. developed land – specify in comment field)')], null=True, size=None, verbose_name='Former land cover')),
                ('former_land_cover_comment', models.TextField(blank=True, verbose_name='Comment on former land cover')),
                ('crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Crops area/yield/export')),
                ('crops_comment', models.TextField(blank=True, verbose_name='Comment on crops')),
                ('animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Livestock area/yield/export')),
                ('animals_comment', models.TextField(blank=True, verbose_name='Comment on livestock')),
                ('mineral_resources', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Mineral resources area/yield/export')),
                ('mineral_resources_comment', models.TextField(blank=True, verbose_name='Comment on mineral resources')),
                ('contract_farming_crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming crops')),
                ('contract_farming_crops_comment', models.TextField(blank=True, verbose_name='Comment on contract farming crops')),
                ('contract_farming_animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming livestock')),
                ('contract_farming_animals_comment', models.TextField(blank=True, verbose_name='Comment on contract farming livestock')),
                ('has_domestic_use', models.NullBooleanField(verbose_name='Has domestic use')),
                ('domestic_use', models.FloatField(blank=True, help_text='%', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Domestic use')),
                ('has_export', models.NullBooleanField(verbose_name='Has export')),
                ('export', models.FloatField(blank=True, help_text='%', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Export')),
                ('export_country1_ratio', models.FloatField(blank=True, help_text='%', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 1 ratio')),
                ('export_country2_ratio', models.FloatField(blank=True, help_text='%', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 2 ratio')),
                ('export_country3_ratio', models.FloatField(blank=True, help_text='%', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 3 ratio')),
                ('use_of_produce_comment', models.TextField(blank=True, verbose_name='Comment on use of produce')),
                ('in_country_processing', models.NullBooleanField(verbose_name='In country processing of produce')),
                ('in_country_processing_comment', models.TextField(blank=True, verbose_name='Comment on in country processing of produce')),
                ('in_country_processing_facilities', models.TextField(blank=True, verbose_name='Processing facilities / production infrastructure of the project (e.g. oil mill, ethanol distillery, biomass power plant etc.)')),
                ('in_country_end_products', models.TextField(blank=True, verbose_name='In-country end products of the project')),
                ('water_extraction_envisaged', models.NullBooleanField(verbose_name='Water extraction envisaged')),
                ('water_extraction_envisaged_comment', models.TextField(blank=True, verbose_name='Comment on water extraction envisaged')),
                ('source_of_water_extraction', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('GROUNDWATER', 'Groundwater'), ('SURFACE_WATER', 'Surface water'), ('RIVER', 'River'), ('LAKE', 'Lake')], null=True, size=None, verbose_name='Source of water extraction')),
                ('source_of_water_extraction_comment', models.TextField(blank=True, verbose_name='Comment on source of water extraction')),
                ('how_much_do_investors_pay_comment', models.TextField(blank=True, verbose_name='Comment on how much do investors pay for water')),
                ('water_extraction_amount', models.IntegerField(blank=True, help_text='m3/year', null=True, verbose_name='Water extraction amount')),
                ('water_extraction_amount_comment', models.TextField(blank=True, verbose_name='Comment on how much water is extracted')),
                ('use_of_irrigation_infrastructure', models.NullBooleanField(verbose_name='Use of irrigation infrastructure')),
                ('use_of_irrigation_infrastructure_comment', models.TextField(blank=True, verbose_name='Comment on use of irrigation infrastructure')),
                ('water_footprint', models.TextField(blank=True, verbose_name='Water footprint of the investment project')),
                ('gender_related_information', models.TextField(blank=True, verbose_name='Comment on gender-related info')),
                ('vggt_applied', models.CharField(blank=True, choices=[('YES', 'Yes'), ('PARTIALLY', 'Partially'), ('NO', 'No')], max_length=100, null=True, verbose_name='Application of Voluntary Guidelines on the Responsible Governance of Tenure (VGGT)')),
                ('vggt_applied_comment', models.TextField(blank=True, verbose_name='Comment on VGGT')),
                ('prai_applied', models.CharField(blank=True, choices=[('YES', 'Yes'), ('PARTIALLY', 'Partially'), ('NO', 'No')], max_length=100, null=True, verbose_name='Application of Principles for Responsible Agricultural Investments (PRAI)')),
                ('prai_applied_comment', models.TextField(blank=True, verbose_name='Comment on PRAI')),
                ('overall_comment', models.TextField(blank=True, verbose_name='Overall comment')),
                ('fully_updated', models.BooleanField(default=False)),
                ('confidential', models.BooleanField(default=False)),
                ('confidential_reason', models.CharField(blank=True, choices=[('TEMPORARY_REMOVAL', 'Temporary removal from PI after criticism'), ('RESEARCH_IN_PROGRESS', 'Research in progress'), ('LAND_OBSERVATORY_IMPORT', 'Land Observatory Import')], max_length=100, null=True)),
                ('confidential_comment', models.TextField(blank=True, null=True, verbose_name='Comment why this deal is private')),
                ('deal_size', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True)),
                ('current_negotiation_status', models.CharField(blank=True, choices=[('Intended', (('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'))), ('Concluded', (('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'))), ('Failed', (('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'))), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], max_length=100, null=True)),
                ('current_implementation_status', models.CharField(blank=True, choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')], max_length=100, null=True)),
                ('current_contract_size', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True)),
                ('current_production_size', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True)),
                ('geojson', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted')], default=1)),
                ('draft_status', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created')),
                ('modified_at', models.DateTimeField(blank=True, null=True, verbose_name='Last update')),
                ('fully_updated_at', models.DateTimeField(blank=True, null=True, verbose_name='Last full update')),
                ('annual_leasing_fee_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_annual_leasing_fee', to='landmatrix.currency', verbose_name='Annual leasing fee currency')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deals', to='landmatrix.country', verbose_name='Target country')),
                ('export_country1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.country', verbose_name='Country 1')),
                ('export_country2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.country', verbose_name='Country 2')),
                ('export_country3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.country', verbose_name='Country 3')),
                ('operating_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deals', to='landmatrix.investor')),
                ('purchase_price_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_purchase_price', to='landmatrix.currency', verbose_name='Purchase price currency')),
                ('transnational', models.NullBooleanField()),
                ('forest_concession', models.BooleanField(default=False)),
                ('current_animals', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=None)),
                ('current_crops', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=None)),
                ('current_mineral_resources', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=None)),
                ('initiation_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1970)])),
                ('current_intention_of_investment', apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('Agriculture', (('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'))), ('Forestry', (('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'))), ('Other', (('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')))], null=True, size=None)),
                ('is_public', models.BooleanField(default=False)),
                ('not_public_reason', models.CharField(blank=True, choices=[('CONFIDENTIAL', 'Confidential flag'), ('NO_COUNTRY', 'No country'), ('HIGH_INCOME_COUNTRY', 'High-income country'), ('NO_DATASOURCES', 'No datasources'), ('NO_OPERATING_COMPANY', 'No operating company'), ('NO_KNOWN_INVESTOR', 'No known investor')], max_length=100)),
                ('top_investors', models.ManyToManyField(related_name='_deal_top_investors_+', to='landmatrix.Investor', verbose_name='Top parent companies')),
                ('parent_companies', models.ManyToManyField(related_name='child_deals', to='landmatrix.Investor', verbose_name='Parent companies')),
                ('off_the_lease', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased area/farmers/households (out-grower)')),
                ('on_the_lease', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='On leased area/farmers/households')),
                ('has_known_investor', models.BooleanField(default=False)),
                ('contracts', models.JSONField()),
                ('datasources', models.JSONField()),
                ('locations', models.JSONField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='investor',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='investor',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.RemoveField(
            model_name='country',
            name='is_target_country',
        ),
        migrations.DeleteModel(
            name='DealVersion',
        ),
        migrations.DeleteModel(
            name='InvestorVersion',
        ),
        migrations.CreateModel(
            name='DealVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True)),
                ('serialized_data', models.JSONField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='landmatrix.deal')),
                ('modified_at', models.DateTimeField(blank=True, null=True)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DealWorkflowInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('draft_status_before', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True)),
                ('draft_status_after', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment', models.TextField(blank=True, null=True)),
                ('processed_by_receiver', models.BooleanField(default=False)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflowinfos', to='landmatrix.deal')),
                ('deal_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflowinfos', to='landmatrix.dealversion')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InvestorVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True)),
                ('serialized_data', models.JSONField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='landmatrix.investor')),
                ('modified_at', models.DateTimeField(blank=True, null=True)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvestorWorkflowInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('draft_status_before', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True)),
                ('draft_status_after', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation'), (4, 'Rejected'), (5, 'To Delete')], null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment', models.TextField(blank=True, null=True)),
                ('processed_by_receiver', models.BooleanField(default=False)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflowinfos', to='landmatrix.investor')),
                ('investor_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflowinfos', to='landmatrix.investorversion')),
                ('to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterField(
            model_name='country',
            name='high_income',
            field=models.BooleanField(default=False, help_text='Target countries are countries that are NOT high income', verbose_name='High income'),
        ),
        migrations.DeleteModel(
            name='Revision',
        ),
        migrations.AddField(
            model_name='deal',
            name='current_draft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.dealversion'),
        ),
        migrations.AddField(
            model_name='investor',
            name='current_draft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.investorversion'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='animals',
            field=models.JSONField(blank=True, null=True, verbose_name='Livestock area/yield/export'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_animals',
            field=models.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming livestock'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_crops',
            field=models.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming crops'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_size',
            field=models.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size under contract (leased or purchased area, in ha)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='crops',
            field=models.JSONField(blank=True, null=True, verbose_name='Crops area/yield/export'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='displacement_of_people',
            field=models.BooleanField(null=True, verbose_name='Displacement of people'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_created',
            field=models.BooleanField(null=True, verbose_name='Jobs created (domestic)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_current',
            field=models.JSONField(blank=True, null=True, verbose_name='Current domestic number of jobs/employees/ daily/seasonal workers'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_created',
            field=models.BooleanField(null=True, verbose_name='Jobs created (foreign)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_current',
            field=models.JSONField(blank=True, null=True, verbose_name='Current foreign number of jobs/employees/ daily/seasonal workers'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='geojson',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='has_domestic_use',
            field=models.BooleanField(null=True, verbose_name='Has domestic use'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='has_export',
            field=models.BooleanField(null=True, verbose_name='Has export'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='implementation_status',
            field=models.JSONField(blank=True, choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')], null=True, verbose_name='Implementation status'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='in_country_processing',
            field=models.BooleanField(null=True, verbose_name='In country processing of produce'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='intention_of_investment',
            field=models.JSONField(blank=True, choices=[('Agriculture', (('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'))), ('Forestry', (('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'))), ('Other', (('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')))], null=True, verbose_name='Intention of investment'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='involved_actors',
            field=models.JSONField(blank=True, choices=[('GOVERNMENT_OR_STATE_INSTITUTIONS', 'Government / state institutions (government, ministries, departments, agencies etc.)'), ('TRADITIONAL_LAND_OWNERS_OR_COMMUNITIES', 'Traditional land-owners / communities'), ('TRADITIONAL_LOCAL_AUTHORITY', 'Traditional local authority (e.g. Chiefdom council / Chiefs)'), ('BROKER', 'Broker'), ('INTERMEDIARY', 'Intermediary'), ('OTHER', 'Other (please specify)')], null=True, verbose_name='Actors involved in the negotiation / admission process'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='land_conflicts',
            field=models.BooleanField(null=True, verbose_name='Presence of land conflicts'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='mineral_resources',
            field=models.JSONField(blank=True, null=True, verbose_name='Mineral resources area/yield/export'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='negotiation_status',
            field=models.JSONField(blank=True, choices=[('Intended', (('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'))), ('Concluded', (('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'))), ('Failed', (('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'))), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], null=True, verbose_name='Negotiation status'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='off_the_lease',
            field=models.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased area/farmers/households (out-grower)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='off_the_lease_state',
            field=models.BooleanField(null=True, verbose_name='Not on leased / purchased (out-grower)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='on_the_lease',
            field=models.JSONField(blank=True, null=True, verbose_name='On leased area/farmers/households'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='on_the_lease_state',
            field=models.BooleanField(null=True, verbose_name='On leased / purchased'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='production_size',
            field=models.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size in operation (production, in ha)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_created',
            field=models.BooleanField(null=True, verbose_name='Jobs created (total)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_current',
            field=models.JSONField(blank=True, null=True, verbose_name='Current total number of jobs/employees/ daily/seasonal workers'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='transnational',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='use_of_irrigation_infrastructure',
            field=models.BooleanField(null=True, verbose_name='Use of irrigation infrastructure'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='water_extraction_envisaged',
            field=models.BooleanField(null=True, verbose_name='Water extraction envisaged'),
        ),
        migrations.RemoveField(
            model_name='deal',
            name='prai_applied',
        ),
        migrations.RemoveField(
            model_name='deal',
            name='prai_applied_comment',
        ),
        migrations.RemoveField(
            model_name='deal',
            name='vggt_applied',
        ),
        migrations.RemoveField(
            model_name='deal',
            name='vggt_applied_comment',
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_intention_of_investment',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'), ('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'), ('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')], null=True, size=None),
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_negotiation_status',
            field=models.CharField(blank=True, choices=[('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'), ('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'), ('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='intention_of_investment',
            field=models.JSONField(blank=True, choices=[('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'), ('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'), ('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')], null=True, verbose_name='Intention of investment'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='nature_of_deal',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Nature of the deal'), blank=True, choices=[('OUTRIGHT_PURCHASE', 'Outright purchase'), ('LEASE', 'Lease'), ('CONCESSION', 'Concession'), ('EXPLOITATION_PERMIT', 'Exploitation permit / license / concession (for mineral resources)'), ('PURE_CONTRACT_FARMING', 'Pure contract farming'), ('OTHER', 'Other')], null=True, size=None, verbose_name='Nature of the deal'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='negotiation_status',
            field=models.JSONField(blank=True, choices=[('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'), ('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'), ('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], null=True, verbose_name='Negotiation status'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_animals',
            field=models.JSONField(blank=True, null=True, verbose_name='Contract farming livestock'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_crops',
            field=models.JSONField(blank=True, null=True, verbose_name='Contract farming crops'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contracts',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='deal',
            name='created_at',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_intention_of_investment',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'), ('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'), ('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable energy'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None),
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_negotiation_status',
            field=models.CharField(blank=True, choices=[('EXPRESSION_OF_INTEREST', 'Intended (Expression of interest)'), ('UNDER_NEGOTIATION', 'Intended (Under negotiation)'), ('MEMORANDUM_OF_UNDERSTANDING', 'Intended (Memorandum of understanding)'), ('ORAL_AGREEMENT', 'Concluded (Oral Agreement)'), ('CONTRACT_SIGNED', 'Concluded (Contract signed)'), ('NEGOTIATIONS_FAILED', 'Failed (Negotiations failed)'), ('CONTRACT_CANCELED', 'Failed (Contract cancelled)'), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='datasources',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='deal',
            name='former_land_cover',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('CROPLAND', 'Cropland'), ('FOREST_LAND', 'Forest land'), ('PASTURE', 'Pasture'), ('RANGELAND', 'Shrub land/Grassland (Rangeland)'), ('MARGINAL_LAND', 'Marginal land'), ('WETLAND', 'Wetland'), ('OTHER_LAND', 'Other land (e.g. developed land – specify in comment field)')], max_length=100), blank=True, null=True, size=None, verbose_name='Former land cover'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='former_land_owner',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('STATE', 'State'), ('PRIVATE_SMALLHOLDERS', 'Private (smallholders)'), ('PRIVATE_LARGE_SCALE', 'Private (large-scale farm)'), ('COMMUNITY', 'Community'), ('INDIGENOUS_PEOPLE', 'Indigenous people'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Former land owner'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='former_land_use',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('COMMERCIAL_AGRICULTURE', 'Commercial (large-scale) agriculture'), ('SMALLHOLDER_AGRICULTURE', 'Smallholder agriculture'), ('SHIFTING_CULTIVATION', 'Shifting cultivation'), ('PASTORALISM', 'Pastoralism'), ('HUNTING_GATHERING', 'Hunting/Gathering'), ('FORESTRY', 'Forestry'), ('CONSERVATION', 'Conservation'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Former land use'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='implementation_status',
            field=models.JSONField(blank=True, null=True, verbose_name='Implementation status'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='intention_of_investment',
            field=models.JSONField(blank=True, null=True, verbose_name='Intention of investment'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='involved_actors',
            field=models.JSONField(blank=True, null=True, verbose_name='Actors involved in the negotiation / admission process'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='locations',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='deal',
            name='materialized_benefits',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity building'), ('FINANCIAL_SUPPORT', 'Financial support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Materialized benefits for local communities'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='name_of_community',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None, verbose_name='Name of community'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='name_of_indigenous_people',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None, verbose_name='Name of indigenous people'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='nature_of_deal',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('OUTRIGHT_PURCHASE', 'Outright purchase'), ('LEASE', 'Lease'), ('CONCESSION', 'Concession'), ('EXPLOITATION_PERMIT', 'Exploitation permit / license / concession (for mineral resources)'), ('PURE_CONTRACT_FARMING', 'Pure contract farming'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Nature of the deal'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='negative_impacts',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('ENVIRONMENTAL_DEGRADATION', 'Environmental degradation'), ('SOCIO_ECONOMIC', 'Socio-economic'), ('CULTURAL_LOSS', 'Cultural loss'), ('EVICTION', 'Eviction'), ('DISPLACEMENT', 'Displacement'), ('VIOLENCE', 'Violence'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Negative impacts for local communities'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='negotiation_status',
            field=models.JSONField(blank=True, null=True, verbose_name='Negotiation status'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='promised_benefits',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity building'), ('FINANCIAL_SUPPORT', 'Financial support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], max_length=100), blank=True, null=True, size=None, verbose_name='Promised benefits for local communities'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='recognition_status',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('INDIGENOUS_RIGHTS_RECOGNIZED', 'Indigenous Peoples traditional or customary rights recognized by government'), ('INDIGENOUS_RIGHTS_NOT_RECOGNIZED', 'Indigenous Peoples traditional or customary rights not recognized by government'), ('COMMUNITY_RIGHTS_RECOGNIZED', 'Community traditional or customary rights recognized by government'), ('COMMUNITY_RIGHTS_NOT_RECOGNIZED', 'Community traditional or customary rights not recognized by government')], max_length=100), blank=True, null=True, size=None, verbose_name='Recognition status of community land tenure'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='source_of_water_extraction',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(choices=[('GROUNDWATER', 'Groundwater'), ('SURFACE_WATER', 'Surface water'), ('RIVER', 'River'), ('LAKE', 'Lake')], max_length=100), blank=True, null=True, size=None, verbose_name='Source of water extraction'),
        ),
        migrations.AddField(
            model_name='investor',
            name='datasources',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='deal',
            name='animals',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_animals',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_farming_crops',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='contract_size',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='crops',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_current',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_planned',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (domestic)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_planned_daily_workers',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (domestic)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_jobs_planned_employees',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (domestic)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='domestic_use',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Domestic use'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='export',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Export'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='export_country1_ratio',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 1 ratio'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='export_country2_ratio',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 2 ratio'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='export_country3_ratio',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 3 ratio'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_current',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_planned',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (foreign)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_planned_daily_workers',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (foreign)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='foreign_jobs_planned_employees',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (foreign)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='implementation_status',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='intended_size',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Intended size (in ha)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='intention_of_investment',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='involved_actors',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='mineral_resources',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='negotiation_status',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='off_the_lease',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='on_the_lease',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='production_size',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_current',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_planned',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned number of jobs (total)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_planned_daily_workers',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned daily/seasonal workers (total)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_jobs_planned_employees',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned employees (total)'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='water_extraction_amount',
            field=models.IntegerField(blank=True, null=True, verbose_name='Water extraction amount'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_negotiation_status',
            field=models.CharField(blank=True, choices=[('EXPRESSION_OF_INTEREST', 'Intended (Expression of interest)'), ('UNDER_NEGOTIATION', 'Intended (Under negotiation)'), ('MEMORANDUM_OF_UNDERSTANDING', 'Intended (Memorandum of understanding)'), ('ORAL_AGREEMENT', 'Concluded (Oral Agreement)'), ('CONTRACT_SIGNED', 'Concluded (Contract signed)'), ('CHANGE_OF_OWNERSHIP', 'Concluded (Change of ownership)'), ('NEGOTIATIONS_FAILED', 'Failed (Negotiations failed)'), ('CONTRACT_CANCELED', 'Failed (Contract cancelled)'), ('CONTRACT_EXPIRED', 'Contract expired')], max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='current_contract_size',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Current contract size'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='name_of_community',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, null=True, size=None, verbose_name='Name of community'),
        ),
        migrations.AlterField(
            model_name='deal',
            name='name_of_indigenous_people',
            field=apps.landmatrix.models.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, null=True, size=None, verbose_name='Name of indigenous people'),
        ),
    ]

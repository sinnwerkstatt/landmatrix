# Generated by Django 3.2.14 on 2022-07-21 14:49

from django.db import migrations

JSON_fields = [
    "contract_size",
    "production_size",
    "intention_of_investment",
    "negotiation_status",
    "implementation_status",
    "on_the_lease",
    "off_the_lease",
    "total_jobs_current",
    "foreign_jobs_current",
    "domestic_jobs_current",
    "involved_actors",
    "crops",
    "animals",
    "mineral_resources",
    "contract_farming_crops",
    "contract_farming_animals",
]


def is_null(x):
    return x is None


def is_empty(x):
    return type(x) is list and len(x) == 0


def is_full(x):
    return type(x) is list and len(x) > 0


def set_model_field(obj, field_name, test_fn, new_value):
    if hasattr(obj, field_name):
        value = getattr(obj, field_name)

        if test_fn(value):
            setattr(obj, field_name, new_value)
    else:
        print(f"Unknown field name {field_name} on obj {obj}")


def set_dict_field(obj: dict, field_name, test_fn, new_value):
    if test_fn(obj[field_name]):
        obj[field_name] = new_value


def forward_deal(deal):
    for field_name in JSON_fields:
        set_model_field(deal, field_name, is_empty, None)


def backward_deal(deal):
    for field_name in JSON_fields:
        set_model_field(deal, field_name, is_null, [])


def forward_deal_version(version):
    data = version.serialized_data

    for field_name in JSON_fields:
        set_dict_field(data, field_name, is_empty, None)


def backward_deal_version(version):
    data = version.serialized_data

    for field_name in JSON_fields:
        set_dict_field(data, field_name, is_null, [])


def forward(apps, schema_editor):
    deal_model = apps.get_model("landmatrix", "Deal")
    deal_version_model = apps.get_model("landmatrix", "DealVersion")

    for deal in deal_model.objects.all():
        forward_deal(deal)
        deal.save()

    for version in deal_version_model.objects.all():
        forward_deal_version(version)
        version.save()


def backward(apps, schema_editor):
    deal_model = apps.get_model("landmatrix", "Deal")
    deal_version_model = apps.get_model("landmatrix", "DealVersion")

    for deal in deal_model.objects.all():
        backward_deal(deal)
        deal.save()

    for version in deal_version_model.objects.all():
        backward_deal_version(version)
        version.save()


class Migration(migrations.Migration):
    dependencies = [
        ("landmatrix", "0002_auto_20220716_1440"),
    ]

    operations = [migrations.RunPython(forward, backward)]

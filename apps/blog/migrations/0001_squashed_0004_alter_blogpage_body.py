# Generated by Django 3.2.13 on 2022-06-29 15:33

import apps.blog.models
import apps.wagtailcms.blocks
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    replaces = [('blog', '0001_squashed_0006_auto_20180206_2239'), ('blog', '0002_auto_20201230_1038'), ('blog', '0003_auto_20210510_1706'), ('blog', '0004_alter_blogpage_body')]

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0001_initial'),
        ('wagtailcore', '0010_change_page_owner_to_null_on_delete'),
        ('wagtailimages', '0005_make_filter_spec_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(max_length=80, unique=True)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('parent', models.ForeignKey(blank=True, help_text='Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='blog.blogcategory')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Blog Category',
                'verbose_name_plural': 'Blog Categories',
            },
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.core.fields.RichTextField()),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_blogpagetag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='date',
            field=models.DateField(default=datetime.datetime(2015, 2, 26, 23, 5, 30, 771014), verbose_name='Post date'),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name='blogpage',
            options={'verbose_name': 'Blog page', 'verbose_name_plural': 'Blog pages'},
        ),
        migrations.CreateModel(
            name='BlogCategoryBlogPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='blog.blogcategory', verbose_name='Category')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='blog.blogpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='body',
            field=wagtail.core.fields.RichTextField(verbose_name='body'),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='header_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Header image'),
        ),
        migrations.CreateModel(
            name='BlogTag',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('taggit.tag',),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='date',
            field=models.DateField(default=datetime.datetime.today, help_text='This date may be displayed on the blog post. It is not used to schedule posts to go live at a later date.', verbose_name='Post date'),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='body',
            field=wagtail.core.fields.RichTextField(blank=True, verbose_name='body'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='author',
            field=models.ForeignKey(blank=True, limit_choices_to=apps.blog.models.limit_author_choices, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_pages', to=settings.AUTH_USER_MODEL, verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='blog_categories',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, through='blog.BlogCategoryBlogPage', to='blog.BlogCategory'),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='body',
            field=wagtail.core.fields.StreamField([('paragraph', apps.wagtailcms.blocks.RichTextBlock(features=['bold', 'italic', 'h2', 'h3', 'ol', 'ul', 'hr', 'link', 'image', 'document-link'])), ('link', wagtail.core.blocks.StructBlock([('cls', wagtail.core.blocks.ChoiceBlock(choices=[('btn', 'Button'), ('btn btn-with-space', 'Button (with space)')], label='Type', required=False)), ('url', wagtail.core.blocks.URLBlock(label='URL')), ('text', wagtail.core.blocks.CharBlock())], icon='link')), ('anchor', wagtail.core.blocks.StructBlock([('slug', wagtail.core.blocks.CharBlock())], icon='link')), ('image', apps.wagtailcms.blocks.ImageBlock()), ('linked_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])), ('media', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('gallery', wagtail.core.blocks.StructBlock([('columns', wagtail.core.blocks.ChoiceBlock(choices=[(1, '1 column'), (2, '2 columns'), (3, '3 columns'), (4, '4 columns'), (5, '5 columns'), (6, '6 columns')], icon='fa fa-columns')), ('images', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])))])), ('slider', wagtail.core.blocks.StructBlock([('images', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])))])), ('section_divider', wagtail.core.blocks.StructBlock([])), ('faqs_block', wagtail.core.blocks.StructBlock([('faqs', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('slug', wagtail.core.blocks.CharBlock()), ('question', wagtail.core.blocks.CharBlock()), ('answer', apps.wagtailcms.blocks.RichTextBlock())])))]))], blank=True, verbose_name='body'),
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Blog index',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='body',
            field=wagtail.core.fields.StreamField([('paragraph', apps.wagtailcms.blocks.RichTextBlock(features=['bold', 'italic', 'h2', 'h3', 'ol', 'ul', 'hr', 'link', 'image', 'document-link'])), ('link', wagtail.core.blocks.StructBlock([('cls', wagtail.core.blocks.ChoiceBlock(choices=[('btn', 'Button'), ('btn btn-with-space', 'Button (with space)')], label='Type', required=False)), ('url', wagtail.core.blocks.URLBlock(label='URL')), ('text', wagtail.core.blocks.CharBlock())], icon='link')), ('anchor', wagtail.core.blocks.StructBlock([('slug', wagtail.core.blocks.CharBlock())], icon='link')), ('image', apps.wagtailcms.blocks.ImageBlock()), ('linked_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])), ('media', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('gallery', wagtail.core.blocks.StructBlock([('columns', wagtail.core.blocks.ChoiceBlock(choices=[(1, '1 column'), (2, '2 columns'), (3, '3 columns'), (4, '4 columns'), (5, '5 columns'), (6, '6 columns')], icon='fa-columns')), ('images', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])))])), ('slider', wagtail.core.blocks.StructBlock([('images', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.URLBlock(label='URL', required=False)), ('caption', apps.wagtailcms.blocks.RichTextBlock(required=False))])))])), ('section_divider', wagtail.core.blocks.StructBlock([])), ('faqs_block', wagtail.core.blocks.StructBlock([('faqs', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('slug', wagtail.core.blocks.CharBlock()), ('question', wagtail.core.blocks.CharBlock()), ('answer', apps.wagtailcms.blocks.RichTextBlock())])))]))], blank=True, verbose_name='body'),
        ),
    ]

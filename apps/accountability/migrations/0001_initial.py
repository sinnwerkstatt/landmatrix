# Generated by Django 5.0.4 on 2024-07-31 12:16

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('landmatrix', '0020_area_nid'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DealScore',
            fields=[
                ('test', models.CharField(max_length=30)),
                ('deal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='landmatrix.dealhull')),
            ],
            options={
                'ordering': ['deal'],
            },
        ),
        migrations.CreateModel(
            name='VggtChapter',
            fields=[
                ('chapter', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='VggtVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=200)),
                ('landmatrix_fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=50)),
                ('landmatrix_additional_fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=50)),
                ('scoring_help', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2000), blank=True, null=True, size=20)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.CharField(max_length=1000)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(blank=True, null=True, verbose_name='Modified at')),
                ('region_id', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('country_id', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('area_min', models.PositiveIntegerField(blank=True, null=True)),
                ('area_max', models.PositiveIntegerField(blank=True, null=True)),
                ('negotiation_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('EXPRESSION_OF_INTEREST', 'Intended (Expression of interest)'), ('UNDER_NEGOTIATION', 'Intended (Under negotiation)'), ('MEMORANDUM_OF_UNDERSTANDING', 'Intended (Memorandum of understanding)'), ('ORAL_AGREEMENT', 'Concluded (Oral Agreement)'), ('CONTRACT_SIGNED', 'Concluded (Contract signed)'), ('CHANGE_OF_OWNERSHIP', 'Concluded (Change of ownership)'), ('NEGOTIATIONS_FAILED', 'Failed (Negotiations failed)'), ('CONTRACT_CANCELED', 'Failed (Contract cancelled)'), ('CONTRACT_EXPIRED', 'Contract expired')]), blank=True, null=True, size=None)),
                ('nature_of_deal', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('OUTRIGHT_PURCHASE', 'Outright purchase'), ('LEASE', 'Lease'), ('CONCESSION', 'Concession'), ('EXPLOITATION_PERMIT', 'Exploitation permit / license / concession (for mineral resources)'), ('PURE_CONTRACT_FARMING', 'Pure contract farming'), ('OTHER', 'Other')]), blank=True, null=True, size=None)),
                ('investor_id', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('investor_country_id', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('initiation_year_min', models.PositiveIntegerField(blank=True, null=True)),
                ('initiation_year_max', models.PositiveIntegerField(blank=True, null=True)),
                ('initiation_year_unknown', models.BooleanField(default=True)),
                ('implementation_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')]), blank=True, null=True, size=None)),
                ('intention_of_investment', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BIOFUELS', 'Biomass for biofuels'), ('BIOMASS_ENERGY_GENERATION', 'Biomass for energy generation (agriculture)'), ('FODDER', 'Fodder'), ('FOOD_CROPS', 'Food crops'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'), ('BIOMASS_ENERGY_PRODUCTION', 'Biomass for energy generation (forestry)'), ('CARBON', 'For carbon sequestration/REDD'), ('FOREST_LOGGING', 'Forest logging / management for wood and fiber'), ('TIMBER_PLANTATION', 'Timber plantation for wood and fiber'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'), ('SOLAR_PARK', 'Solar park'), ('WIND_FARM', 'Wind farm'), ('RENEWABLE_ENERGY', 'Renewable energy unspecified'), ('CONVERSATION', 'Conservation'), ('INDUSTRY', 'Industry'), ('LAND_SPECULATION', 'Land speculation'), ('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('OTHER', 'Other')]), blank=True, null=True, size=None)),
                ('intention_of_investment_unknown', models.BooleanField(default=False)),
                ('crops', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('ACC', 'Accacia'), ('ALF', 'Alfalfa'), ('ALG', 'Seaweed / Macroalgae(unspecified)'), ('ALM', 'Almond'), ('ALV', 'Aloe Vera'), ('APL', 'Apple'), ('AQU', 'Aquaculture (unspecified crops)'), ('BAM', 'Bamboo'), ('BAN', 'Banana'), ('BEA', 'Bean'), ('BOT', 'Bottle Gourd'), ('BRL', 'Barley'), ('BWT', 'Buckwheat'), ('CAC', 'Cacao'), ('CAS', 'Cassava (Maniok)'), ('CAW', 'Cashew'), ('CHA', 'Chat'), ('CHE', 'Cherries'), ('CNL', 'Canola'), ('COC', 'Coconut'), ('COF', 'Coffee Plant'), ('COT', 'Cotton'), ('CRL', 'Cereals (unspecified)'), ('CRN', 'Corn (Maize)'), ('CRO', 'Croton'), ('CST', 'Castor Oil Plant'), ('CTR', 'Citrus Fruits (unspecified)'), ('DIL', 'Dill'), ('EUC', 'Eucalyptus'), ('FLW', 'Flowers (unspecified)'), ('FNT', 'Fig-Nut'), ('FOD', 'Fodder Plants (unspecified)'), ('FOO', 'Food crops (unspecified)'), ('FRT', 'Fruit (unspecified)'), ('GRA', 'Grapes'), ('GRN', 'Grains (unspecified)'), ('HRB', 'Herbs (unspecified)'), ('JTR', 'Jatropha'), ('LNT', 'Lentils'), ('MAN', 'Mango'), ('MUS', 'Mustard'), ('OAT', 'Oats'), ('OIL', 'Oil Seeds (unspecified)'), ('OLE', 'Oleagionous plant'), ('OLV', 'Olives'), ('ONI', 'Onion'), ('OPL', 'Oil Palm'), ('OTH', 'Other crops'), ('PAL', 'Palms'), ('PAP', 'Papaya'), ('PAS', 'Passion fruit'), ('PEA', 'Peanut (groundnut)'), ('PEP', 'Pepper'), ('PES', 'Peas'), ('PIE', 'Pine'), ('PIN', 'Pineapple'), ('PLS', 'Pulses (unspecified)'), ('POM', 'Pomegranate'), ('PON', 'Pongamia Pinnata'), ('PTT', 'Potatoes'), ('RAP', 'Rapeseed'), ('RCH', 'Rice (hybrid)'), ('RIC', 'Rice'), ('ROS', 'Roses'), ('RUB', 'Rubber tree'), ('RYE', 'Rye'), ('SEE', 'Seeds Production (unspecified)'), ('SES', 'Sesame'), ('SOR', 'Sorghum'), ('SOY', 'Soya Beans'), ('SPI', 'Spices (unspecified)'), ('SSL', 'Sisal'), ('SUB', 'Sugar beet'), ('SUC', 'Sugar Cane'), ('SUG', 'Sugar (unspecified)'), ('SUN', 'Sun Flower'), ('SWP', 'Sweet Potatoes'), ('TBC', 'Tobacco'), ('TEA', 'Tea'), ('TEF', 'Teff'), ('TEK', 'Teak'), ('TOM', 'Tomatoes'), ('TRE', 'Trees (unspecified)'), ('VGT', 'Vegetables (unspecified)'), ('VIN', 'Vineyard'), ('WHT', 'Wheat'), ('YAM', 'Yam')]), blank=True, null=True, size=None)),
                ('animals', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('AQU', 'Aquaculture (animals)'), ('BEE', 'Beef Cattle'), ('CTL', 'Cattle'), ('DCT', 'Dairy Cattle'), ('FSH', 'Fish'), ('GOT', 'Goats'), ('OTH', 'Other livestock'), ('PIG', 'Pork'), ('POU', 'Poultry'), ('SHP', 'Sheep'), ('SHR', 'Shrimp')]), blank=True, null=True, size=None)),
                ('minerals', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('ALU', 'Aluminum'), ('ASP', 'Asphaltite'), ('ATC', 'Anthracite'), ('BAR', 'Barite'), ('BAS', 'Basalt'), ('BAX', 'Bauxite'), ('BEN', 'Bentonite'), ('BUM', 'Building materials'), ('CAR', 'Carbon'), ('CHR', 'Chromite'), ('CLA', 'Clay'), ('COA', 'Coal'), ('COB', 'Cobalt'), ('COP', 'Copper'), ('DIA', 'Diamonds'), ('EME', 'Emerald'), ('FLD', 'Feldspar'), ('FLO', 'Fluoride'), ('GAS', 'Gas'), ('GLD', 'Gold'), ('GRT', 'Granite'), ('GRV', 'Gravel'), ('HEA', 'Heavy Mineral Sands'), ('ILM', 'Ilmenite'), ('IRO', 'Iron'), ('JAD', 'Jade'), ('LED', 'Lead'), ('LIM', 'Limestone'), ('LIT', 'Lithium'), ('MAG', 'Magnetite'), ('MBD', 'Molybdenum'), ('MGN', 'Manganese'), ('MRB', 'Marble'), ('NIK', 'Nickel'), ('OTH', 'Other minerals'), ('PET', 'Petroleum'), ('PHP', 'Phosphorous'), ('PLT', 'Platinum'), ('PUM', 'Hydrocarbons (e.g. crude oil)'), ('PYR', 'Pyrolisis Plant'), ('RUT', 'Rutile'), ('SAN', 'Sand'), ('SIC', 'Silica'), ('SIL', 'Silver'), ('SLT', 'Salt'), ('STO', 'Stone'), ('TIN', 'Tin'), ('TTM', 'Titanium'), ('URM', 'Uranium'), ('ZNC', 'Zinc')]), blank=True, null=True, size=None)),
                ('transnational', models.BooleanField(blank=True, null=True)),
                ('forest_concession', models.BooleanField(blank=True, null=True)),
                ('editors', models.ManyToManyField(blank=True, related_name='editable_projects', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountability.project')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VggtArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.PositiveIntegerField()),
                ('description', models.CharField(max_length=2000)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountability.vggtchapter')),
            ],
        ),
        migrations.CreateModel(
            name='DealVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('TO_SCORE', 'To score'), ('WAITING', 'Waiting'), ('VALIDATED', 'Validated')], max_length=10)),
                ('score', models.CharField(choices=[('NO_SCORE', 'No score'), ('NO_DATA', 'Insufficient data'), ('NO_VIOLATIONS', 'No violation'), ('PARTIAL_VIOLATIONS', 'Violations'), ('SEVERE_VIOLATIONS', 'Severe violations')], max_length=20)),
                ('scored_at', models.DateTimeField(blank=True, null=True, verbose_name='Created at')),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='todo', to=settings.AUTH_USER_MODEL)),
                ('deal_score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountability.dealscore')),
                ('score_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('vggt_variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountability.vggtvariable')),
            ],
            options={
                'ordering': ['deal_score', 'vggt_variable'],
                'unique_together': {('deal_score', 'vggt_variable')},
            },
        ),
    ]

type Mutation {
  login(username: String!, password: String!): LoginPayload
  logout: Boolean!

  add_public_deal_comment(
    id: Int!
    title: String
    comment: String!
    token: String!
    name: String
    email: String
  ): Boolean

  add_deal_comment(
    id: Int!
    version: Int
    comment: String!
    to_user_id: Int
  ): DealEditReturn
  change_deal_status(
    id: Int!
    version: Int!
    transition: WorkflowTransition!
    comment: String
    to_user_id: Int
    fully_updated: Boolean
  ): DealEditReturn
  deal_edit(id: Int!, version: Int, payload: Payload): DealEditReturn
  deal_delete(id: Int!, version: Int, comment: String): Boolean
  upload_datasource_file(filename: String!, payload: String!): String
  deal_set_confidential(
    id: Int!
    confidential: Boolean!
    version: Int
    reason: ConfidentialReason
    comment: String
  ): Boolean

  add_investor_comment(
    id: Int!
    version: Int
    comment: String!
    to_user_id: Int
  ): InvestorEditReturn
  change_investor_status(
    id: Int!
    version: Int!
    transition: WorkflowTransition!
    comment: String
    to_user_id: Int
  ): InvestorEditReturn
  investor_edit(id: Int!, version: Int, payload: Payload): InvestorEditReturn
  investor_delete(id: Int!, version: Int, comment: String): Boolean
}

scalar Payload

enum ConfidentialReason {
  TEMPORARY_REMOVAL
  RESEARCH_IN_PROGRESS
  LAND_OBSERVATORY_IMPORT
}

enum WorkflowTransition {
  TO_DRAFT
  TO_REVIEW
  TO_ACTIVATION
  ACTIVATE
}

type DealEditReturn {
  dealId: Int
  dealVersion: Int
}
type InvestorEditReturn {
  investorId: Int
  investorVersion: Int
}

type LoginPayload {
  status: Boolean!
  error: String
  user: User
}

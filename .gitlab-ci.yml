image: sinntern/ubuntu_for_django:latest

variables:
  STAGING_HOST: dev.landmatrix.org
  STAGING_USER: landmatrix
  PRODUCTION_HOST: landmatrix.org
  PRODUCTION_USER: landmatrix
  DJANGO_SETTINGS_MODULE: config.settings.ci
  LANG: C.UTF-8
  POSTGRES_DB: django
  POSTGRES_USER: django
  POSTGRES_PASSWORD: django
  DATABASE_URL: "postgis://django:django@postgres/django"

stages:
  - test
  - deploy

django formatting and linting:
  stage: test
  interruptible: true
  services:
    - name: postgis/postgis:16-3.4
      alias: postgres
  script:
    - poetry install
    - poetry run black . --check
    - poetry run ./manage.py makemigrations --check --no-input
    # - poetry run pylint config  -d unused-wildcard-import,unused-import,wildcard-import
    # - poetry run pylint apps --exit-zero # pylint is quite broken at the moment

django tests and coverage:
  stage: test
  interruptible: true
  services:
    - name: postgis/postgis:16-3.4
      alias: postgres
  script:
    - poetry install
    - poetry run doit migrate
    - poetry run pytest -x
  coverage: /^TOTAL.*\s+(\d+\%)$/

frontend test:
  stage: test
  interruptible: true
  script:
    - cd frontend
    - npm ci
    - npm run test

#frontend integration test:
#  stage: test
#  interruptible: true
#  services:
#    - name: postgis/postgis:12-3.2
#      alias: postgres
#  before_script:
#    - npm ci && npx playwright install --with-deps
#    - cd frontend && npm ci && npm run build && cd ..
#    - poetry install
#  script:
#    - poetry run doit initial_setup production=True
#    - poetry run ./manage.py create_playwright_test_users
#    - PATH=$(npm bin):$PATH ./test.sh
#  artifacts:
#    when: always
#    paths:
#        - test-results/
#        - results.xml
#    reports:
#        junit: results.xml

frontend formatting and linting:
  variables:
    PUBLIC_BASE_URL: "http://localhost:9000"
  stage: test
  interruptible: true
  script:
    - cd frontend
    - npm ci
    - npm run format:check
    - npm run lint:check
    - npm run build

deploy to staging:
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - |
      ssh $STAGING_USER@$STAGING_HOST << E=O=F
      set -e
      mv maintenance.html_ maintenance.html || echo "could not move maintenance"
      cd ~/htdocs
      poetry run doit full_update dev=True production=True
      sudo /bin/systemctl restart webapp-dev.landmatrix.org.service
      cd ~
      mv maintenance.html maintenance.html_
      E=O=F
  only:
    - main

deploy to staging2:
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - |
      ssh landmatrix2@dev.landmatrix.org << E=O=F
      set -e
      mv maintenance.html_ maintenance.html || echo "could not move maintenance"
      cd ~/htdocs
      git pull
      git switch newModel2
      poetry install
      poetry run doit update production=True
      sudo /bin/systemctl restart webapp-dev2.landmatrix.org.service
      cd ~
      mv maintenance.html maintenance.html_
      E=O=F
  only:
    - newModel2

deploy to production:
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_HOST << E=O=F
      set -e
      mv maintenance.html_ maintenance.html || echo "could not move maintenance"
      cd ~/htdocs
      poetry run doit full_update production=True branch=production
      sudo /bin/systemctl restart webapp-landmatrix.org.service
      cd ~
      mv maintenance.html maintenance.html_
      E=O=F
  only:
    - production
